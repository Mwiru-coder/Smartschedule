# Generated by Django 5.1.3 on 2025-03-28 09:26

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_code', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('course_name', models.CharField(max_length=150, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_id', models.AutoField(primary_key=True, serialize=False)),
                ('department_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('venue_name', models.CharField(max_length=100, unique=True)),
                ('venue_number', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('capacity', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('registration_no', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('first_name', models.CharField(max_length=40)),
                ('last_name', models.CharField(max_length=40)),
                ('second_name', models.CharField(blank=True, max_length=40, null=True)),
                ('phone_no', models.CharField(max_length=15, unique=True)),
                ('email', models.EmailField(max_length=60, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('course_code', models.ManyToManyField(related_name='instructors', to='inputdetail.course')),
                ('department_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructors', to='inputdetail.department')),
                ('groups', models.ManyToManyField(related_name='instructor_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='instructor_permissions', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('program_code', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('program_name', models.CharField(max_length=255, unique=True)),
                ('duration', models.IntegerField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to='inputdetail.department')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('academic_year', models.IntegerField()),
                ('group_name', models.CharField(primary_key=True, serialize=False, unique=True)),
                ('students_No', models.IntegerField()),
                ('course_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='inputdetail.course')),
                ('Program_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='inputdetail.program')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='inputdetail.program'),
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('schedule_id', models.AutoField(primary_key=True, serialize=False)),
                ('day_of_week', models.CharField(max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='inputdetail.course')),
                ('group_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='inputdetail.group')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='inputdetail.instructor')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='inputdetail.program')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='inputdetail.venue')),
            ],
        ),
        migrations.CreateModel(
            name='Conflict',
            fields=[
                ('conflict_id', models.AutoField(primary_key=True, serialize=False)),
                ('conflict_type', models.CharField(choices=[('VENUE_OVERLAP', 'Venue Overlap'), ('INSTRUCTOR_CLASH', 'Instructor Clash'), ('COURSE_OVERLAP', 'Course Overlap')], max_length=50)),
                ('detected_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('resolution_status', models.CharField(choices=[('PENDING', 'Pending'), ('RESOLVED', 'Resolved')], default='PENDING', max_length=20)),
                ('resolution_comment', models.TextField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_conflicts', to='inputdetail.instructor')),
                ('schedule_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conflict_schedule_1', to='inputdetail.schedule')),
                ('schedule_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conflict_schedule_2', to='inputdetail.schedule')),
            ],
        ),
    ]
